name: Deploy to Firebase Hosting

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Verify public directory exists
        run: |
          if [ ! -d "public" ]; then
            echo "❌ Error: public directory not found"
            exit 1
          fi
          if [ ! -f "public/index.html" ]; then
            echo "❌ Error: public/index.html not found"
            exit 1
          fi
          echo "✅ Public directory and index.html verified"

      - name: Validate Firebase service account secret
        run: |
          # Write the secret to a temporary file without printing it
          SA_JSON='${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          # Preserve newlines and content exactly
          printf '%s' "$SA_JSON" > sa.json
          if [ ! -s sa.json ]; then
            echo "❌ Error: FIREBASE_SERVICE_ACCOUNT secret is missing or empty";
            rm -f sa.json; exit 1;
          fi
          # Validate expected JSON structure
          if ! jq -e '.type == "service_account" and has("client_email") and has("private_key") and has("project_id")' sa.json > /dev/null; then
            echo "❌ Error: FIREBASE_SERVICE_ACCOUNT is not a valid service account JSON. Expected keys: type=service_account, client_email, private_key, project_id";
            rm -f sa.json; exit 1;
          fi
          rm -f sa.json
          echo "✅ Service account JSON looks valid"

      - name: Resolve PROJECT_ID
        run: |
          PID='${{ secrets.FIREBASE_PROJECT_ID }}'
          if [ -z "$PID" ]; then PID='photo2profitai-24443056'; fi
          echo "PROJECT_ID=$PID" >> $GITHUB_ENV

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
          projectId: "${{ env.PROJECT_ID }}"
          channelId: live
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
